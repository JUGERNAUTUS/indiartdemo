// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 46Sa4WMCscwEt6Udy4KXw2
// Component: ptPrW8RuWjO
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../../reactComponents/TextInput"; // plasmic-import: pD-B5n7bBeW/component
import Button from "../../../reactComponents/Button"; // plasmic-import: H6IfdFc-NOE-/component
import { useScreenVariants as useScreenVariantsl9NDyDlcQ3H } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: l9n-DyDlcQ3h/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_indiart_demo.module.css"; // plasmic-import: 46Sa4WMCscwEt6Udy4KXw2/projectcss
import sty from "./PlasmicCreateNftForm.module.css"; // plasmic-import: ptPrW8RuWjO/css
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: eBLPldbips0Z/icon

export const PlasmicCreateNftForm__VariantProps = new Array();

export const PlasmicCreateNftForm__ArgProps = new Array(
  "media",
  "nftpanel",
  "nftfile",
  "category"
);

function PlasmicCreateNftForm__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsl9NDyDlcQ3H()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__eytB)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nUj6R)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__e3S6)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Create a NFT"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </h1>
              </p.Stack>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__qqMSg)}>
            <div className={classNames(projectcss.all, sty.freeBox__qLQih)}>
              <div className={classNames(projectcss.all, sty.freeBox__irjph)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zZzTe
                  )}
                >
                  {"Name"}
                </div>

                <TextInput
                  data-plasmic-name={"nftname"}
                  data-plasmic-override={overrides.nftname}
                  className={classNames("__wab_instance", sty.nftname)}
                  startIcon={
                    <React.Fragment>
                      <SearchsvgIcon
                        className={classNames(projectcss.all, sty.svg__vHeyK)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gi9Vq
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </React.Fragment>
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__itnRh
                  )}
                >
                  {"Artist's Social Link"}
                </div>

                <TextInput
                  data-plasmic-name={"nftlink"}
                  data-plasmic-override={overrides.nftlink}
                  className={classNames("__wab_instance", sty.nftlink)}
                  startIcon={
                    <React.Fragment>
                      <SearchsvgIcon
                        className={classNames(projectcss.all, sty.svg__bp6Hj)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gi9Vq
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </React.Fragment>
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6JhRo
                  )}
                >
                  {"List Price (in INR)"}
                </div>

                <TextInput
                  data-plasmic-name={"listprice"}
                  data-plasmic-override={overrides.listprice}
                  className={classNames("__wab_instance", sty.listprice)}
                  startIcon={
                    <React.Fragment>
                      <SearchsvgIcon
                        className={classNames(projectcss.all, sty.svg__a2Bdo)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gi9Vq
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </React.Fragment>
                  }
                />

                <div
                  data-plasmic-name={"uploadMediaFileJpggif"}
                  data-plasmic-override={overrides.uploadMediaFileJpggif}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.uploadMediaFileJpggif
                  )}
                >
                  {"Upload media file (.jpg/.gif)"}
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___2Cqdp)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: null,
                    value: args.nftfile
                  })}
                </div>

                <div
                  data-plasmic-name={"category"}
                  data-plasmic-override={overrides.category}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.category
                  )}
                >
                  {"Media type"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__u98R6)}>
                  {p.renderPlasmicSlot({
                    defaultContents: null,
                    value: args.media
                  })}
                </div>

                <div
                  data-plasmic-name={"category2"}
                  data-plasmic-override={overrides.category2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.category2
                  )}
                >
                  {"Category"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__gWe5V)}>
                  {p.renderPlasmicSlot({
                    defaultContents: null,
                    value: args.category
                  })}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__ai58O)}>
                  <Button
                    data-plasmic-name={"createnft"}
                    data-plasmic-override={overrides.createnft}
                    className={classNames("__wab_instance", sty.createnft)}
                  >
                    {"Create NFT"}
                  </Button>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__eyUq)}>
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.nftpanel
              })}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "nftname",
    "nftlink",
    "listprice",
    "uploadMediaFileJpggif",
    "category",
    "category2",
    "createnft"
  ],

  h1: ["h1"],
  nftname: ["nftname"],
  nftlink: ["nftlink"],
  listprice: ["listprice"],
  uploadMediaFileJpggif: ["uploadMediaFileJpggif"],
  category: ["category"],
  category2: ["category2"],
  createnft: ["createnft"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCreateNftForm__ArgProps,
      internalVariantPropNames: PlasmicCreateNftForm__VariantProps
    });

    return PlasmicCreateNftForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCreateNftForm";
  } else {
    func.displayName = `PlasmicCreateNftForm.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateNftForm = Object.assign(
  // Top-level PlasmicCreateNftForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    nftname: makeNodeComponent("nftname"),
    nftlink: makeNodeComponent("nftlink"),
    listprice: makeNodeComponent("listprice"),
    uploadMediaFileJpggif: makeNodeComponent("uploadMediaFileJpggif"),
    category: makeNodeComponent("category"),
    category2: makeNodeComponent("category2"),
    createnft: makeNodeComponent("createnft"),
    // Metadata about props expected for PlasmicCreateNftForm
    internalVariantProps: PlasmicCreateNftForm__VariantProps,
    internalArgProps: PlasmicCreateNftForm__ArgProps
  }
);

export default PlasmicCreateNftForm;
/* prettier-ignore-end */
