// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 46Sa4WMCscwEt6Udy4KXw2
// Component: 5MSC0M28Vln
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../../reactComponents/TextInput"; // plasmic-import: pD-B5n7bBeW/component
import { useScreenVariants as useScreenVariantsl9NDyDlcQ3H } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: l9n-DyDlcQ3h/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_indiart_demo.module.css"; // plasmic-import: 46Sa4WMCscwEt6Udy4KXw2/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: 5MSC0M28Vln/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: viq1EOTvAMqx/icon
import indiartBlackCroppedpngKGqu7UJ8 from "./images/indiartBlackCroppedpng.png"; // plasmic-import: k_Gqu7uJ8/picture

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

function PlasmicNavbar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsl9NDyDlcQ3H()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__j6ZSc)}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"70px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"200px"}
          src={{
            src: indiartBlackCroppedpngKGqu7UJ8,
            fullWidth: 1317,
            fullHeight: 311,
            aspectRatio: undefined
          }}
        />

        <TextInput
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput}
          className={classNames("__wab_instance", sty.textInput)}
          showStartIcon={true}
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sIiXd)}
        >
          <p.Stack
            as={"a"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__dfu48
            )}
          >
            {false ? (
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__uvEq)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2Cc7M
              )}
            >
              {"Explore"}
            </div>

            {false ? (
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__jRr8I)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={"a"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__nb8Dy
            )}
          >
            {false ? (
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__njefg)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ng5X8
              )}
            >
              {"Create"}
            </div>

            {false ? (
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__wqM8N)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={"button"}
            data-plasmic-name={"demo"}
            data-plasmic-override={overrides.demo}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.button, sty.demo)}
          >
            {false ? (
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__eT5O)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yw0Fc
              )}
            >
              {"Demo"}
            </div>

            {false ? (
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__cepLl)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "textInput", "textbox", "demo"],
  img: ["img"],
  textInput: ["textInput", "textbox"],
  demo: ["demo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbar__ArgProps,
      internalVariantPropNames: PlasmicNavbar__VariantProps
    });

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    textInput: makeNodeComponent("textInput"),
    demo: makeNodeComponent("demo"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
